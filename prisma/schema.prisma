// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  
  // Subscription info
  subscriptionStatus String? @default("free") // free, trial, active, cancelled
  subscriptionEndDate DateTime?
  
  // Usage limits
  monthlyTranscriptionMinutes Int @default(0)
  monthlyTranscriptionLimit Int @default(300) // 5 hours for free tier
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  meetings Meeting[]
  
  @@index([email])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// Clarnote Models
model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  tags        String   @default("") // Comma-separated tags
  language    String   @default("en")
  
  // File info
  originalFileName String?
  fileUrl          String?
  fileSize         Int?
  duration         Int? // in seconds
  
  // Processing status
  status           MeetingStatus @default(UPLOADED)
  transcriptionId  String?
  processingError  String? // Store error messages for debugging
  retryCount       Int @default(0)
  
  // AI generated content
  transcript       String?
  transcriptSegments String? // JSON array of {speaker: string, text: string, startTime?: number, endTime?: number}
  speakerMap       String? // JSON object mapping speaker IDs to custom names {speaker_1: "Dan", speaker_2: "Veronika"}
  summary          String?
  actionItems      String? // JSON string of action items
  followUpEmail    String?
  
  // Quality metrics
  transcriptionQuality Float? // 0.0 to 1.0 quality score
  processingTime       Int?   // Time taken to process in seconds
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, status])
}

enum MeetingStatus {
  UPLOADED
  TRANSCRIBING
  TRANSCRIBED
  GENERATING_SUMMARY
  COMPLETED
  ERROR
  CANCELLED
}
